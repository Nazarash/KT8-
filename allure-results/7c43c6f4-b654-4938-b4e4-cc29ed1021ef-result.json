{"name": "test_get_json_failure", "status": "broken", "statusDetails": {"message": "TypeError: ClientResponseError.__init__() missing 2 required positional arguments: 'request_info' and 'history'", "trace": "@pytest.mark.asyncio\n    async def test_get_json_failure():\n        url = \"https://jsonplaceholder.typicode.com/todos/invalid\"\n    \n        # Используем aioresponses для имитации запроса и генерации ошибки\n        with aioresponses() as mocked_responses:\n            mocked_responses.get(url, exception=aiohttp.ClientResponseError)\n    \n            # Ожидаем, что при вызове get_json по данному URL возникнет ошибка ClientResponseError\n            with pytest.raises(aiohttp.ClientResponseError) as exc_info:\n>               await get_json(url)\n\ntests\\test_app.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napp.py:6: in get_json\n    async with session.get(url) as response:\nvenv\\Lib\\site-packages\\aiohttp\\client.py:1187: in __aenter__\n    self._resp = await self._coro\nC:\\Users\\andry\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\unittest\\mock.py:2264: in _execute_mock_call\n    result = await effect(*args, **kwargs)\nvenv\\Lib\\site-packages\\aioresponses\\core.py:512: in _request_mock\n    response = await self.match(method, url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <aioresponses.core.aioresponses object at 0x000001995BA4BAA0>, method = 'GET'\nurl = URL('https://jsonplaceholder.typicode.com/todos/invalid'), allow_redirects = True, kwargs = {}, history = []\nkey = '76376b4f-d734-46e1-b5fd-d0fb7e2a8128', matcher = <aioresponses.core.RequestMatch object at 0x000001995BC00860>\nresponse_or_exc = <class 'aiohttp.client_exceptions.ClientResponseError'>\n\n    async def match(\n        self, method: str,\n        url: URL,\n        allow_redirects: bool = True,\n        **kwargs: Any\n    ) -> Optional['ClientResponse']:\n        history = []\n        while True:\n            for key, matcher in self._matches.items():\n                if matcher.match(method, url):\n                    response_or_exc = await matcher.build_response(\n                        url, allow_redirects=allow_redirects, **kwargs\n                    )\n                    break\n            else:\n                return None\n    \n            if matcher.repeat is False:\n                del self._matches[key]\n    \n            if self.is_exception(response_or_exc):\n>               raise response_or_exc\nE               TypeError: ClientResponseError.__init__() missing 2 required positional arguments: 'request_info' and 'history'\n\nvenv\\Lib\\site-packages\\aioresponses\\core.py:467: TypeError"}, "start": 1702545589976, "stop": 1702545589987, "uuid": "3a622505-a352-4871-8e58-f97f53db7ce3", "historyId": "4ae280fb04efa43257b4a1307274006f", "testCaseId": "4ae280fb04efa43257b4a1307274006f", "fullName": "tests.test_app#test_get_json_failure", "labels": [{"name": "tag", "value": "asyncio"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_app"}, {"name": "host", "value": "DESKTOP-RKLJ7AP"}, {"name": "thread", "value": "16744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_app"}]}