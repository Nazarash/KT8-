{"name": "test_get_json_failure", "status": "failed", "statusDetails": {"message": "Failed: DID NOT RAISE <class 'aiohttp.client_exceptions.ClientResponseError'>", "trace": "@pytest.mark.asyncio\n    async def test_get_json_failure():\n        url = \"https://jsonplaceholder.typicode.com/todos/invalid\"\n    \n        # Используем aioresponses для имитации запроса и генерации ошибки\n        with aioresponses() as mocked_responses:\n            mocked_responses.get(url, status=404)\n    \n            # Ожидаем, что при вызове get_json по данному URL возникнет ошибка ClientResponseError\n>           with pytest.raises(aiohttp.ClientResponseError):\nE           Failed: DID NOT RAISE <class 'aiohttp.client_exceptions.ClientResponseError'>\n\ntests\\test_app.py:16: Failed"}, "start": 1702545503470, "stop": 1702545503499, "uuid": "1ea3c43a-dbc2-461a-91b2-b75231b877c3", "historyId": "4ae280fb04efa43257b4a1307274006f", "testCaseId": "4ae280fb04efa43257b4a1307274006f", "fullName": "tests.test_app#test_get_json_failure", "labels": [{"name": "tag", "value": "asyncio"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_app"}, {"name": "host", "value": "DESKTOP-RKLJ7AP"}, {"name": "thread", "value": "516-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_app"}]}