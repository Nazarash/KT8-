{"name": "test_get_json_failure", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 404\n +  where 0 = ClientResponseError(None, None).status\n +    where ClientResponseError(None, None) = <ExceptionInfo ClientResponseError(None, None) tblen=6>.value", "trace": "@pytest.mark.asyncio\n    async def test_get_json_failure():\n        url = \"https://jsonplaceholder.typicode.com/todos/invalid\"\n    \n        # Используем aioresponses для имитации запроса и генерации ошибки\n        with aioresponses() as mocked_responses:\n            # Используем exception с вызовом конструктора ClientResponseError\n            mocked_responses.get(url, exception=aiohttp.ClientResponseError(None, None))\n    \n            # Ожидаем, что при вызове get_json по данному URL возникнет ошибка ClientResponseError\n            with pytest.raises(aiohttp.ClientResponseError) as exc_info:\n                await get_json(url)\n    \n>           assert exc_info.value.status == 404\nE           assert 0 == 404\nE            +  where 0 = ClientResponseError(None, None).status\nE            +    where ClientResponseError(None, None) = <ExceptionInfo ClientResponseError(None, None) tblen=6>.value\n\ntests\\test_app.py:20: AssertionError"}, "start": 1702545649892, "stop": 1702545649904, "uuid": "24224866-fc25-477b-b209-3bdd177befd3", "historyId": "4ae280fb04efa43257b4a1307274006f", "testCaseId": "4ae280fb04efa43257b4a1307274006f", "fullName": "tests.test_app#test_get_json_failure", "labels": [{"name": "tag", "value": "asyncio"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_app"}, {"name": "host", "value": "DESKTOP-RKLJ7AP"}, {"name": "thread", "value": "6544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_app"}]}